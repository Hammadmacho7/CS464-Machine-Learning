# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/122tkKUIhFcetbwu4_4PH5KxY3_y_TjzF
"""

from google.colab import drive
drive.mount('/content/gdrive')

!ls /content/gdrive/My\ Drive/iris.data

import os
import csv
import math
import random
import operator
import time
import sys


import numpy as np

random.seed(123)
np.random.seed(123)

#starting with Multinomial Classifier

root = '/content/gdrive/My Drive/Shared'


csv_path = os.path.join(root, 'sms_train_features.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0) #delete first row and column 
    print(len(dataset)) #rows 
    
    train_set = np.array([[int(row[col_i]) for col_i in range(len(row))] for row in dataset])
    #for x in range(3910): 
     # print( train_set[x][0])

csv_path = os.path.join(root, 'sms_test_features.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0) #delete first row and column 
    print(len(dataset))
    
    test_set = np.array([[int(row[col_i]) for col_i in range(len(row))] for row in dataset])
    x = 2

numOfSpam = 0
numOfNonSpam = 0
csv_path = os.path.join(root, 'sms_test_labels.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0)
    print(len(dataset))

    testLabel_set = dataset
    for row in testLabel_set: 
      if row[0] == '1':
        numOfSpam += 1
      if row[0] == '0':
        numOfNonSpam += 1
print("number of spam sms test set", numOfSpam)
print("number of non-spam sms test set",numOfNonSpam)

numOfSpam = 0
numOfNonSpam = 0
csv_path = os.path.join(root, 'sms_train_labels.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0)
    print(len(dataset))

    trainLabel_set = dataset
    for row in trainLabel_set: 
      if row[0] == "1":
        numOfSpam += 1
      if row[0] == "0":
        numOfNonSpam += 1
print("number of spam sms test set", numOfSpam)
print("number of non-spam sms test set",numOfNonSpam)

pOfSpam = numOfSpam/(numOfSpam + numOfNonSpam)
print("prob of spam: ", pOfSpam)
pOfNonSpam = numOfNonSpam/(numOfSpam + numOfNonSpam)
print("prob of nonspam: ",pOfNonSpam)

loggedPriorSpam = math.log10(pOfSpam)
loggedPriorNonSpam = math.log10(pOfNonSpam)
print("prob of logged spam: ",loggedPriorSpam)
print("prob of logged nonspam: ",loggedPriorNonSpam)

c = 3458
r = 2
spamArray = [ [0] * c for i in range(r) ] # have the made the array 
nonspamArray = [ [0] * c for i in range(r) ] # have the made the array 



for x in range (3458):
  counter = 0
  for row in trainLabel_set:
    if(row[0] == '0'):
       nonspamArray[0][x] += train_set[counter][x]  
    if(row[0] == '1'):
       spamArray[0][x] += train_set[counter][x]
    counter += 1

nonspamArrayTotal = 0
for x in range(3458):
  j = nonspamArray[0][x]
  print(j)
  nonspamArrayTotal += j
print("nonspam array total words: ", nonspamArrayTotal)

spamArrayTotal = 0
for x in range(3458):
  j = spamArray[0][x]
  print(j)
  spamArrayTotal += j

print("spam array total words: ", spamArrayTotal)

for x in range(3458):
  j = spamArray[0][x] 
  pOfJ = j / spamArrayTotal
  #if pOfJ > 0:
    #pOfJ = math.log10(pOfJ)
  spamArray[1][x] = pOfJ

#for x in range(3458):
   #print(spamArray[1][x])

for x in range(3458):
  j = nonspamArray[0][x] 
  pOfJ = j / nonspamArrayTotal
  #if pOfJ > 0:
    #pOfJ = math.log10(pOfJ)
  nonspamArray[1][x] = pOfJ 
#for x in range(3458):
  #print(nonspamArray[1][x])

def isSpam(i): #using the original method, no log as log was giving me errors on notebook for some reason  
  r = i
  counter1 = 0
  for x in range(3458):
    timesVariable = test_set[r][x]
    twji_multiply = math.log(spamArray[1][x] + sys.float_info.min)
    check = timesVariable * twji_multiply
    counter1 = counter1 + check
  counter1 = counter1  + loggedPriorSpam
  return counter1

def isNotSpam(i):
  r = i
  counter1 = 0
  for x in range(3458):
    timesVariable = test_set[r][x]
    twji_multiply = math.log(nonspamArray[1][x] + sys.float_info.min)
    check = timesVariable * twji_multiply
    counter1 = counter1 + check
  counter1 = counter1  + loggedPriorNonSpam
  return counter1

def calc_accuracy(gt_y, pred_y):
  correct = 0
  FN = 0
  TN = 0
  FP = 0
  TP = 0
  for g_y, p_y in zip(gt_y, pred_y):
    if g_y == str(p_y): 
      correct += 1
    
    if g_y == '1' and str(p_y) == '0':
       FN += 1
    if g_y == '1' and str(p_y) == '1':
       TP += 1  
    if g_y == '0' and str(p_y) == '1':
       FP += 1
    if g_y == '0' and str(p_y) == '0':
       TN += 1    


  print("FN: ", FN ,", ", "TN: ", TN,", ", "FP: ", FP,", ", "TP: ", TP)   
  return (correct/float(len(gt_y))*100)

predictions = []
for i in range(977):
  y = i
  spamValue = isSpam(y)
  nonSpamValue = isNotSpam(y)
  if spamValue > nonSpamValue:
    predictions.append(1)
  else: 
    predictions.append(0)
print(predictions)  
print(len(predictions))

read = 0
for x in range(977):
  if predictions[x] > 0: 
    read+= 1
print(read)    
acc = calc_accuracy(testLabel_set, predictions)
print(acc)

#***************************BernoulliStarts****************************#

col1 = 3458
row1 = 2
spamArrayB = [ [0] * col1 for i in range(row1) ] # have the made the array 
nonspamArrayB = [ [0] * col1 for i in range(row1) ] # have the made the array 

print(nonspamArrayB[0][3457])

for x in range (3458):
  counter = 0
  for row in trainLabel_set:
    if(row[0] == '0'):
       if train_set[counter][x] > 0:
          nonspamArrayB[0][x] += 1 
    if(row[0] == '1'):
       if train_set[counter][x] > 0:
          spamArrayB[0][x] += 1
    counter += 1

#for x in range(3458):
  #j = nonspamArrayB[0][x]
  #print(j)

#for x in range(3458):
  #j = spamArrayB[0][x]
  #print(j)

for x in range(3458):
  j = spamArrayB[0][x] 
  pOfJ = j / numOfSpam
  #if pOfJ > 0:
    #pOfJ = math.log10(pOfJ)
  spamArrayB[1][x] = pOfJ

#for x in range(3458):
   #print(spamArrayB[1][x])

for x in range(3458):
  j = nonspamArrayB[0][x] 
  pOfJ = j / numOfNonSpam #since we know the number of non spam sms 
  #if pOfJ > 0:
    #pOfJ = math.log10(pOfJ)
  nonspamArrayB[1][x] = pOfJ

#for x in range(3458):
   #print(nonspamArrayB[1][x])

def isSpamBernoulli(i):
  r = i
  features = 3458
  counter1 = 1
  for x in range(features): #here we will use the feature selection 
    tj = test_set[r][x]
    
    #make bernoulli 
    if tj > 0:
      tj = 1
    if tj == 0:
      tj = 0

    tjIntoProbOfWord = tj * spamArrayB[1][x] #1st part 

    OneMinusTj = 1 - tj
    OneMinusProb = 1 - spamArrayB[1][x] 
    TjIntoOneMinusProb = OneMinusProb * OneMinusTj #2nd part 

    totalValue = tjIntoProbOfWord + TjIntoOneMinusProb
    counter1 = counter1 * totalValue

  counter1 = math.log(counter1+ sys.float_info.min)   
  counter1 = counter1 + loggedPriorSpam
  return counter1

def isNotSpamBernoulli(i):
  r = i
  counter1 = 1
  features = 3458
  for x in range(features): #here we will use the feature selection 
    tj = test_set[r][x]
    
    #make bernoulli 
    if tj > 0:
      tj = 1
    if tj == 0:
      tj = 0

    tjIntoProbOfWord = tj * nonspamArrayB[1][x] #1st part 

    OneMinusTj = 1 - tj
    OneMinusProb = 1 - nonspamArrayB[1][x] 
    TjIntoOneMinusProb = OneMinusProb * OneMinusTj #2nd part 

    totalValue = tjIntoProbOfWord + TjIntoOneMinusProb
    counter1 = counter1 * totalValue

  counter1 = math.log(counter1+ sys.float_info.min)   
  counter1 = counter1 + loggedPriorNonSpam
  return counter1

predictions1 = []

start = time.time()

for i in range(977):
  y = i
  spamValue1 = isSpamBernoulli(y)
  nonSpamValue1 = isNotSpamBernoulli(y)
  if spamValue1 > nonSpamValue1:
    predictions1.append(1)
  else: 
    predictions1.append(0)

end = time.time()
tookTime = end - start  

print(predictions1)  
print(len(predictions1))

read1 = 0
for x in range(977):
  if predictions1[x] > 0: 
    #print(x)
    read1+= 1
print(read1)    
acc1 = calc_accuracy(testLabel_set, predictions1)
print("all features, Bernoulli: ", acc1)
print("time taken by all features", tookTime)
print("")

def largestIndex(i):
  testArray = []
  for j in range(3458):
    testArray.append(nonspamArrayB[1][j])

  dices = np.argpartition(testArray, -i)[-i:]
  print(dices)  
  return dices
    


#change in order to get different sets of features
toSelect = 2000


arrayToCheck = largestIndex(toSelect)


for i in range(toSelect):
  print("probability: ", nonspamArrayB[1][arrayToCheck[i]], " column no: ", arrayToCheck[i] )

def isNotSpamBernoulliSelect(i, k):
  r = i
  counter1 = 1
  features = k
  for x in range(k): #here we will use the feature selection
   
    tj = test_set[r][arrayToCheck[x]]
    
    #make bernoulli 
    if tj > 0:
      tj = 1
    if tj == 0:
      tj = 0

    theVal = arrayToCheck[x] 
    tjIntoProbOfWord = nonspamArrayB[1][theVal] * tj #1st part 

    OneMinusTj = 1 - tj
    OneMinusProb = 1 - nonspamArrayB[1][theVal] 
    TjIntoOneMinusProb = OneMinusProb * OneMinusTj #2nd part 

    totalValue = tjIntoProbOfWord + TjIntoOneMinusProb

    counter1 = counter1 * totalValue
     
  counter1 = math.log(counter1 + sys.float_info.min)   
  counter1 = counter1 + loggedPriorNonSpam
  return counter1

def isSpamBernoulliSelect(i, k):
  r = i
  features = k
  counter1 = 1
  for x in range(features): #here we will use the feature selection 
    tj = test_set[r][arrayToCheck[x]]
    
    #make bernoulli 
    if tj > 0:
      tj = 1
    if tj == 0:
      tj = 0
    
    theVal = arrayToCheck[x]
    tjIntoProbOfWord = spamArrayB[1][theVal] * tj #1st part 

    OneMinusTj = 1 - tj
    OneMinusProb = 1 - spamArrayB[1][theVal] 
    TjIntoOneMinusProb = OneMinusProb * OneMinusTj #2nd part 

    totalValue = tjIntoProbOfWord + TjIntoOneMinusProb

    counter1 = counter1 * totalValue

  counter1 = math.log(counter1 + sys.float_info.min)   
  counter1 = counter1 * pOfSpam
  return counter1

predictions2 = []

start = time.time()

for i in range(977):
  y = i
  spamValue2 = isSpamBernoulliSelect(y, toSelect)
  nonSpamValue2 = isNotSpamBernoulliSelect(y, toSelect)
  if spamValue2 > nonSpamValue2:
    predictions2.append(1)
  else: 
    predictions2.append(0)

end = time.time()
tookTime = end - start  

print(predictions2)  
print(len(predictions2))

read2 = 0
for x in range(977):
  if predictions2[x] > 0: 
    #print(x)
    read2+= 1
print(read2)    
acc2 = calc_accuracy(testLabel_set, predictions2)
print(acc2)
print(tookTime)