# -*- coding: utf-8 -*-
"""Copy of Copy of Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ljqp2jwTfP7tdVRaz9cgGYLRqSDuBjLc
"""

from google.colab import drive
drive.mount('/content/gdrive')

!ls /content/gdrive/My\ Drive/iris.data

import os
import csv
import math
import random
import operator
import time


import numpy as np

random.seed(123)
np.random.seed(123)

root = '/content/gdrive/My Drive/Shared'


csv_path = os.path.join(root, 'diabetes_train_features.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0)
    
    train_set = np.array([[float(row[col_i]) for col_i in range(len(row))] for row in dataset])
    #for row in train_set:
       #print (row)

csv_path = os.path.join(root, 'diabetes_test_features.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    dataset = list(lines)[:-1]
    dataset = np.delete(dataset, 0, 1)
    dataset = np.delete(dataset, 0, 0)
 
   
    test_set = np.array([[float(row[col_i]) for col_i in range(len(row))] for row in dataset])
    #for row in test_set:
       #print (row)

csv_path = os.path.join(root, 'diabetes_train_labels.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    trainLabel_set = list(lines)[:-1]
    trainLabel_set = np.delete(trainLabel_set, 0, 0)
    trainLabel_set = np.delete(trainLabel_set, 0, 1)
    trainLabel_set = [row[len(row)-1] for row in trainLabel_set]
  
    #for row in trainLabel_set:
       # print (row)

csv_path = os.path.join(root, 'diabetes_test_labels.csv')
with open(csv_path, 'r') as csvfile:
    lines = csv.reader(csvfile)
    testLabel_set = list(lines)[:-1]
    testLabel_set = np.delete(testLabel_set, 0, 0)
    testLabel_set = np.delete(testLabel_set, 0, 1)
    testLabel_set = [row[len(row)-1] for row in testLabel_set]
  
    #for row in testLabel_set:
        #print (row)

def euclidean_distance(sample1, sample2):
    assert len(sample1) == len(sample2), "Different number of features exist for the given samples"

    distance = 0
    for i in range(len(sample1)):
        distance += pow((sample1[i]- sample2[i]), 2)
    return math.sqrt(distance)

n = np.array([4, 2, 1, 6, 2, 4, 1, 5])
n1 = np.array([8, 5, 6, 3 ,2, 4, 7, 3])

distance = euclidean_distance(n, n1)
print(distance)

def get_neighbors(train_X, train_Y, test_sample, k):
    distances = []
    neighbors = []
    
    for train_sample, train_gt,  in zip(train_X, train_Y):
        distance = euclidean_distance(train_sample, test_sample)
        distances.append((train_sample, train_gt, distance))
    distances.sort(key=operator.itemgetter(2))
    for i in range(k):
        neighbors.append(distances[i])

    neighbors = distances[:k]
    return neighbors

classes = np.unique(trainLabel_set)
print (classes)

def classify(neighbors, classes):
    class_votes = {cls: 0 for cls in classes}
    
    for n in neighbors:
        c = n[1] #Â the second item denotes the class in the tuple
        class_votes[c] += 1
    
    most_vote_count = 0
    most_voted_class = None
    for cls in class_votes:
        if class_votes[cls] > most_vote_count:
            most_voted_class = cls
            most_vote_count = class_votes[cls]
    return most_voted_class

def calc_accuracy(gt_y, pred_y):
  correct = 0
  FN = 0
  TN = 0
  FP = 0
  TP = 0
  for g_y, p_y in zip(gt_y, pred_y):
    if g_y == p_y: 
      correct += 1
    
    if g_y == '1' and p_y == '0':
       FN += 1
    if g_y == '1' and p_y == '1':
       TP += 1  
    if g_y == '0' and p_y == '1':
       FP += 1
    if g_y == '0' and p_y == '0':
       TN += 1    


  print("FN: ", FN ,", ", "TN: ", TN,", ", "FP: ", FP,", ", "TP: ", TP)   
  return (correct/float(len(gt_y))*100)

calc_accuracy(['a', 'b'], ['a', 'b'])

class KNN:
    def __init__(self, n_neighbors=5):
        self.n_neighbors = n_neighbors
        
    def fit(self, X, y):
        self.train_X = X
        self.train_y = y
        self.classes = np.unique(y)
        
    # X: test data
    def predict(self, X):
        predictions = []
        for x in X:
            neighbors = get_neighbors(self.train_X, self.train_y, x, self.n_neighbors)
            p_class = classify(neighbors, self.classes)
            predictions.append(p_class)
        return predictions

knn = KNN(n_neighbors = 9)

start = time.time()
knn.fit(train_set, trainLabel_set)
pred_y = knn.predict(test_set)
acc = calc_accuracy(testLabel_set, pred_y)
end = time.time()
tookTime = end - start

#print("FN: ",FN, "TN: ", TN, "FP: ", FP, "TP: ", TP )

print ("all columns, accuracy: ", acc, " time taken: ", tookTime)

print("")

#the backward elimination
tryingTrain_set = train_set
tryingTest_set = test_set

print("Below is the iterative deletion from column 1 to 8: ")
print("")

#this is it 

tryingTrain_set = train_set
tryingTest_set = test_set

for x in range(8):
  tryingTrain_set = np.delete(tryingTrain_set, x, 1) #delete the columns 
  tryingTest_set = np.delete(tryingTest_set, x, 1)
  
  start = time.time()
  knn.fit(tryingTrain_set, trainLabel_set)
  pred_y = knn.predict(tryingTest_set)
  acc = calc_accuracy(testLabel_set, pred_y)
  end = time.time()
  tookTime = end - start
  print ("removed column: ", x+1 , " accuracy: ", acc, " time taken: ", tookTime)
  print('')
  
  tryingTrain_set = train_set
  tryingTest_set = test_set #end

print('')
print('round two, removed column 5')
print('')

tryingTrain_setRoundTwo = np.delete(train_set, 4, 1) #column 5 gone  
tryingTest_setRoundTwo = np.delete(test_set, 4, 1)
for x in range(7):
  tryingTrain_set = np.delete(tryingTrain_setRoundTwo, x, 1) #column 5 gone 
  tryingTest_set = np.delete(tryingTest_setRoundTwo, x, 1)
  
  start = time.time()
  knn.fit(tryingTrain_set, trainLabel_set)
  pred_y = knn.predict(tryingTest_set)
  acc = calc_accuracy(testLabel_set, pred_y)
  end = time.time()
  tookTime= end - start
  print ("removed column: ", x+1 , " accuracy: ", acc, " time taken: ", tookTime)
  print('')
  
  tryingTrain_set = tryingTrain_setRoundTwo 
  tryingTest_set = tryingTest_setRoundTwo

print('')
print('round three, removed column 1')
print('')
#remove the 4th column
tryingTrain_setRoundThree = np.delete(tryingTrain_setRoundTwo, 0, 1) #column 1 gone
tryingTest_setRoundThree = np.delete(tryingTest_setRoundTwo, 0, 1)

for x in range(6):
  tryingTrain_set = np.delete(tryingTrain_setRoundThree, x, 1) 
  tryingTest_set = np.delete(tryingTest_setRoundThree, x, 1)
  
  start = time.time()
  knn.fit(tryingTrain_set, trainLabel_set)
  pred_y = knn.predict(tryingTest_set)
  acc = calc_accuracy(testLabel_set, pred_y)
  end = time.time()
  tookTime= end - start
  print ("removed column: ", x+1 , " accuracy: ", acc, "time taken: ", tookTime)
  print('')
  
  tryingTrain_set = tryingTrain_setRoundThree 
  tryingTest_set = tryingTest_setRoundThree

print('')
print('round four, removed column 5')
print('')

tryingTrain_setRoundFour = np.delete(tryingTrain_setRoundThree, 4, 1) #column 4 gone
tryingTest_setRoundFour = np.delete(tryingTest_setRoundThree, 4, 1)

for x in range(5):
  tryingTrain_set = np.delete(tryingTrain_setRoundFour, x, 1) 
  tryingTest_set = np.delete(tryingTest_setRoundFour, x, 1)
  
  start = time.time()
  knn.fit(tryingTrain_set, trainLabel_set)
  pred_y = knn.predict(tryingTest_set)
  acc = calc_accuracy(testLabel_set, pred_y)
  end = time.time()
  tookTime= end - start
  print ("removed column: ", x+1 , " accuracy: ", acc, "time taken: ", tookTime)
  print('')
  
  tryingTrain_set = tryingTrain_setRoundFour
  tryingTest_set = tryingTest_setRoundFour

print('')
print('No need to go to round five as we obtain lower accuracy for D-1 than D, compared to previous round. Stop')
print('')